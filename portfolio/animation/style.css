/* pseudo-classe permet de cibler la racine de l'arbre représentant le document (: = html)*/
:root {
  
   --pixel-size: 16; /* variable pour zoomer*/

}

body {
    width: 100%;
    margin-bottom: 800px;
    background-color: black;
}

.Character {
   /* calc permet réaliser des calculs pour déterminer la valeu*/

   /*largeur = 32px et on le zoom*/
   width: calc(32px * var(--pixel-size));
   height: calc(32px * var(--pixel-size));
   /* coupe les élément qui dépasse ducadre*/
   overflow: hidden;
   /* permet de décaler l'élément*/
   position: relative;
   margin: 4em auto;
}

.Character_spritesheet {
   /* appel une fonction qui dure 1sec et qui boucle indéfiniment et qui coupe la largeur en 4 pour faire un pas apres k'autre*/
   animation: moveSpritesheet 1s steps(4) infinite;
   /* redimensionnement du personnage*/
   width: calc(128px * var(--pixel-size));
   position: absolute;
   
}
.Character_shadow {
   position: absolute;
   width: calc(32px * var(--pixel-size));
   height: calc(32px * var(--pixel-size));
}

.pixelart {
   image-rendering: pixelated; /* aide le navigateur à proposer de l'algorithme qui devrait être utilisé pour redimensionner les images*/
}

/*-------------------------------------------------------------------------------------------------*/

.face-right {
   top: calc(-32px * var(--pixel-size));
}
.face-up {
   top: calc(-64px * var(--pixel-size));
}
.face-left {
   top: calc(-96px * var(--pixel-size));
}
/*-------------------------------------------------------------------------------------------------*/

@keyframes moveSpritesheet {
   /*permet de définir les étapes qui composent une animation*/
   from {
      /*point de départ de l'animation*/
      transform: translate3d(0px,0,0)
      /*permet de déplacer un élément dans l'espace tridimensionnel (x, y, z)*/
   }
   /*On peut mettre des x% pour des étape intermediaire ( attention l'on part de 0 à 100%)*/
   to {
      /*fin de l'animation */
      transform: translate3d(-100%,0,0)
   }
}
